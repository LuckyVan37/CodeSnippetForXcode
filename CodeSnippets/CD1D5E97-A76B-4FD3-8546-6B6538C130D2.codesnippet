<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>Swift_func_sample</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>
//参数标签（Argument Label）
func goToWork(at Time:String) -&gt; Void {
     print("this time is \(Time)")
}
goToWork(at: "8:00")


//参数可以有默认值
//默认参数值（Default Parameter Value）
func check(name: String = "nobody", age: Int, job: String = "none") {
    print("name=\(name), age=\(age), job=\(job)")
}
check(name: "Jack", age: 20, job: "Doctor") // name=Jack, age=20, job=Doctor
check(name: "Rose", age: 18) // name=Rose, age=18, job=none
check(age: 10, job: "Batman") // name=nobody, age=10, job=Batman
check(age: 15) // name=nobody, age=15, job=none

//可变参数（Variadic Parameter）

func sum6(_ numbers: Int...) -&gt; Int {
    var total = 0
    for number in numbers {
        total += number
    }
    return total

}
let value = sum6(10, 20, 30, 40, 50, 60, 70) // 280
print(value)


func swapValues(v1:inout Int,v2:inout Int) {
    let tmp = v1
    v1 = v2
    v2 = tmp
}
var tmpValueA = 10
var tmpValueB = 20
print("a = \(tmpValueA),b = \(tmpValueB)")
swap(&amp;tmpValueA, &amp;tmpValueB)
print("a = \(tmpValueA),b = \(tmpValueB)")

/*
 函数类型（Function Type）
 每一个函数都是有类型的，函数类型由形式参数类型、返回值类型组成
 func test() { } // () -&gt; Void 或者 () -&gt; ()
 func sum(a: Int, b: Int) -&gt; Int {

 a + b } // (Int, Int) -&gt; Int
 
 // 定义变量
 var fn: (Int, Int) -&gt; Int = sum
 fn(2, 3) // 5，调用时不需要参数标签
 
 */
//函数类型作为函数参数
func sum9(v1: Int, v2: Int) -&gt; Int {
    v1 + v2
}
func difference9(v1: Int, v2: Int) -&gt; Int {
    v1 - v2
}
func printResult(_ mathFn: (Int, Int) -&gt; Int, _ a: Int, _ b: Int) {
    print("Result: \(mathFn(a, b))")
    
}
printResult(difference9, 5, 2) // Result: 3
printResult(sum9, 5, 2) // Result: 7

//函数类型作为函数返回值

func next(_ input: Int) -&gt; Int {
    input + 1
}
func previous(_ input: Int) -&gt; Int {
    input - 1
}
func forward(_ forward: Bool) -&gt;   (Int) -&gt; Int {
    forward ? next : previous
}
let a = forward(false)(3) // 2
let b = forward(true)(3) // 4
print(a)
print(b)

//嵌套函数（Nested Function）
//将函数定义在函数内部
func forward2(_ forward: Bool) -&gt;    (Int) -&gt; Int {
    func next2(_ input: Int) -&gt; Int {
        input + 1
    }
    func previous2(_ input: Int) -&gt; Int {
        input - 1
    }
    return forward ? next2 : previous2
}
forward2(true)(3) //4
forward2(false)(3) //2

 
//typealias用来给类型起别名
typealias Byte = Int8
typealias Short = Int16
typealias Long = Int64
typealias Date = (year: Int, month: Int, day: Int)
func test(_ date: Date) {
    print(date.0)
    print(date.year)
}
test((2011, 9, 10))


typealias IntFn = (Int, Int) -&gt; Int
func difference(v1: Int, v2: Int) -&gt; Int {
    v1 - v2
}
let fn: IntFn = difference
let res = fn(20, 10) // 10
print(res)
func setFn(_ fn: IntFn) { }
setFn(difference)
func getFn() -&gt; IntFn { difference }
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>CD1D5E97-A76B-4FD3-8546-6B6538C130D2</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>Swift_函数案例</string>
	<key>IDECodeSnippetTitle</key>
	<string>Swift_func_sample</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
